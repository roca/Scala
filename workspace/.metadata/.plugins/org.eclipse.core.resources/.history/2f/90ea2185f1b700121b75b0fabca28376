
import forcomp.Anagrams._

object test {
val sentence = List("Yes","man")                  //> sentence  : List[String] = List(Yes, man)
val occurrences = sentenceOccurrences(sentence)   //> occurrences  : forcomp.Anagrams.Occurrences = List((a,1), (e,1), (m,1), (n,1
                                                  //| ), (s,1), (y,1))
val combin = combinations(occurrences)            //> combin  : List[forcomp.Anagrams.Occurrences] = List(List((a,1)), List((e,1))
                                                  //| , List((m,1)), List((n,1)), List((s,1)), List((y,1)), List((a,1), (e,1)), Li
                                                  //| st((a,1), (m,1)), List((a,1), (n,1)), List((a,1), (s,1)), List((a,1), (y,1))
                                                  //| , List((e,1), (m,1)), List((e,1), (n,1)), List((e,1), (s,1)), List((e,1), (y
                                                  //| ,1)), List((m,1), (n,1)), List((m,1), (s,1)), List((m,1), (y,1)), List((n,1)
                                                  //| , (s,1)), List((n,1), (y,1)), List((s,1), (y,1)), List((a,1), (e,1), (m,1)),
                                                  //|  List((a,1), (e,1), (n,1)), List((a,1), (e,1), (s,1)), List((a,1), (e,1), (y
                                                  //| ,1)), List((a,1), (m,1), (n,1)), List((a,1), (m,1), (s,1)), List((a,1), (m,1
                                                  //| ), (y,1)), List((a,1), (n,1), (s,1)), List((a,1), (n,1), (y,1)), List((a,1),
                                                  //|  (s,1), (y,1)), List((e,1), (m,1), (n,1)), List((e,1), (m,1), (s,1)), List((
                                                  //| e,1), (m,1), (y,1)), List((e,1), (n,1), (s,1)), List((e,1), (n,1), (y,1)), L
                                                  //| ist((e,1), (s,1), (y,1)), List((m,1), (n,1), (s,1)), List((m,1), (n,1), (y,1
                                                  //| )), List((m,1), (s,1), (
                                                  //| Output exceeds cutoff limit.
sentenceAnagrams(sentence).combinations(2).toList.map( x => x.head ::: x.tail.head).distinct
                                                  //> res0: List[List[forcomp.Anagrams.Word]] = List(List(seamy, mens), List(seamy
                                                  //| , many), List(seamy, Mans), List(seamy, yes), List(seamy, men), List(seamy, 
                                                  //| say), List(seamy, San), List(seamy, Sam), List(seamy, man), List(seamy, sea)
                                                  //| , List(seamy, Mae), List(seamy, my), List(seamy, en), List(seamy, as), List(
                                                  //| seamy, an), List(seamy, am), List(mens, many), List(mens, Mans), List(mens, 
                                                  //| yes), List(mens, men), List(mens, say), List(mens, San), List(mens, Sam), Li
                                                  //| st(mens, man), List(mens, sea), List(mens, Mae), List(mens, my), List(mens, 
                                                  //| en), List(mens, as), List(mens, an), List(mens, am), List(many, Mans), List(
                                                  //| many, yes), List(many, men), List(many, say), List(many, San), List(many, Sa
                                                  //| m), List(many, man), List(many, sea), List(many, Mae), List(many, my), List(
                                                  //| many, en), List(many, as), List(many, an), List(many, am), List(Mans, yes), 
                                                  //| List(Mans, men), List(Mans, say), List(Mans, San), List(Mans, Sam), List(Man
                                                  //| s, man), List(Mans, sea)
                                                  //| Output exceeds cutoff limit.

}