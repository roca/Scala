
import forcomp.Anagrams._

object test {
val sentence = List("Yes","man")                  //> sentence  : List[String] = List(Yes, man)
val occurrences = sentenceOccurrences(sentence)   //> occurrences  : forcomp.Anagrams.Occurrences = List((a,1), (e,1), (m,1), (n,1
                                                  //| ), (s,1), (y,1))
val combin = combinations(occurrences)            //> combin  : List[forcomp.Anagrams.Occurrences] = List(List((a,1)), List((e,1))
                                                  //| , List((m,1)), List((n,1)), List((s,1)), List((y,1)), List((a,1), (e,1)), Li
                                                  //| st((a,1), (m,1)), List((a,1), (n,1)), List((a,1), (s,1)), List((a,1), (y,1))
                                                  //| , List((e,1), (m,1)), List((e,1), (n,1)), List((e,1), (s,1)), List((e,1), (y
                                                  //| ,1)), List((m,1), (n,1)), List((m,1), (s,1)), List((m,1), (y,1)), List((n,1)
                                                  //| , (s,1)), List((n,1), (y,1)), List((s,1), (y,1)), List((a,1), (e,1), (m,1)),
                                                  //|  List((a,1), (e,1), (n,1)), List((a,1), (e,1), (s,1)), List((a,1), (e,1), (y
                                                  //| ,1)), List((a,1), (m,1), (n,1)), List((a,1), (m,1), (s,1)), List((a,1), (m,1
                                                  //| ), (y,1)), List((a,1), (n,1), (s,1)), List((a,1), (n,1), (y,1)), List((a,1),
                                                  //|  (s,1), (y,1)), List((e,1), (m,1), (n,1)), List((e,1), (m,1), (s,1)), List((
                                                  //| e,1), (m,1), (y,1)), List((e,1), (n,1), (s,1)), List((e,1), (n,1), (y,1)), L
                                                  //| ist((e,1), (s,1), (y,1)), List((m,1), (n,1), (s,1)), List((m,1), (n,1), (y,1
                                                  //| )), List((m,1), (s,1), (
                                                  //| Output exceeds cutoff limit.
sentenceAnagrams(sentence).combinations(2).toList.map( x => x.head ::: x.tail) //> res0: List[List[forcomp.Anagrams.Sentence]] = List(List(List(seamy), List(me
                                                  //| ns)), List(List(seamy), List(many)), List(List(seamy), List(Mans)), List(Lis
                                                  //| t(seamy), List(yes)), List(List(seamy), List(men)), List(List(seamy), List(s
                                                  //| ay)), List(List(seamy), List(San)), List(List(seamy), List(Sam)), List(List(
                                                  //| seamy), List(man)), List(List(seamy), List(sea)), List(List(seamy), List(Mae
                                                  //| )), List(List(seamy), List(my)), List(List(seamy), List(en)), List(List(seam
                                                  //| y), List(as)), List(List(seamy), List(an)), List(List(seamy), List(am)), Lis
                                                  //| t(List(mens), List(many)), List(List(mens), List(Mans)), List(List(mens), Li
                                                  //| st(yes)), List(List(mens), List(men)), List(List(mens), List(say)), List(Lis
                                                  //| t(mens), List(San)), List(List(mens), List(Sam)), List(List(mens), List(man)
                                                  //| ), List(List(mens), List(sea)), List(List(mens), List(Mae)), List(List(mens)
                                                  //| , List(my)), List(List(mens), List(en)), List(List(mens), List(as)), List(Li
                                                  //| st(mens), List(an)), Lis
                                                  //| Output exceeds cutoff limit.

}