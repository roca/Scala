
import forcomp.Anagrams._

object test {
val sentence = List("Linux", "rulez")             //> sentence  : List[String] = List(Linux, rulez)
val occurrences = sentenceOccurrences(sentence)   //> occurrences  : forcomp.Anagrams.Occurrences = List((e,1), (i,1), (l,2), (n,1
                                                  //| ), (r,1), (u,2), (x,1), (z,1))

val combin = combinations(occurrences)            //> combin  : List[forcomp.Anagrams.Occurrences] = List(List((e,1)), List((i,1))
                                                  //| , List((l,1)), List((l,2)), List((n,1)), List((r,1)), List((u,1)), List((u,2
                                                  //| )), List((x,1)), List((z,1)), List((e,1), (i,1)), List((e,1), (l,1)), List((
                                                  //| e,1), (l,2)), List((e,1), (n,1)), List((e,1), (r,1)), List((e,1), (u,1)), Li
                                                  //| st((e,1), (u,2)), List((e,1), (x,1)), List((e,1), (z,1)), List((i,1), (l,1))
                                                  //| , List((i,1), (l,2)), List((i,1), (n,1)), List((i,1), (r,1)), List((i,1), (u
                                                  //| ,1)), List((i,1), (u,2)), List((i,1), (x,1)), List((i,1), (z,1)), List((l,1)
                                                  //| , (n,1)), List((l,1), (r,1)), List((l,1), (u,1)), List((l,1), (u,2)), List((
                                                  //| l,1), (x,1)), List((l,1), (z,1)), List((l,2), (n,1)), List((l,2), (r,1)), Li
                                                  //| st((l,2), (u,1)), List((l,2), (u,2)), List((l,2), (x,1)), List((l,2), (z,1))
                                                  //| , List((n,1), (r,1)), List((n,1), (u,1)), List((n,1), (u,2)), List((n,1), (x
                                                  //| ,1)), List((n,1), (z,1)), List((r,1), (u,1)), List((r,1), (u,2)), List((r,1)
                                                  //| , (x,1)), List((r,1), (z
                                                  //| Output exceeds cutoff limit.
sentenceAnagrams(sentence)                        //> java.util.NoSuchElementException: head of empty list
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:337)
                                                  //| 	at scala.collection.immutable.Nil$.head(List.scala:334)
                                                  //| 	at forcomp.Anagrams$.f$2(Anagrams.scala:189)
                                                  //| 	at forcomp.Anagrams$.sentenceAnagrams(Anagrams.scala:194)
                                                  //| 	at test$$anonfun$main$1.apply$mcV$sp(test.scala:9)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at test$.main(test.scala:4)
                                                  //| 	at test.main(test.scala)

}