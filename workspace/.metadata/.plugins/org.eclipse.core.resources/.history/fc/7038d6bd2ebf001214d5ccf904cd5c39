package streams

import common._
import streams._

trait Level1 extends GameDef with Solver with StringParserTerrain {
      /* terrain for level 1*/

    val level =
    """ooo-------
      |oSoooo----
      |ooooooooo-
      |-ooooooooo
      |-----ooToo
      |------ooo-""".stripMargin

   
  }

object scratch extends Level1{

 val initial = Stream((startBlock, List()))       //> initial  : scala.collection.immutable.Stream[(streams.scratch.Block, List[No
                                                  //| thing])] = Stream((Block(Pos(1,1),Pos(1,1)),List()), ?)
 val explored = Set(startBlock)                   //> explored  : scala.collection.immutable.Set[streams.scratch.Block] = Set(Bloc
                                                  //| k(Pos(1,1),Pos(1,1)))
 
  	        val more = for {
  	          neighbor <- initial
  	          neighbors_with_history <- newNeighborsOnly(neighborsWithHistory(neighbor._1,neighbor._2),explored)
  	        } yield neighbors_with_history    //> more  : scala.collection.immutable.Stream[(streams.scratch.Block, List[strea
                                                  //| ms.scratch.Move])] = Stream((Block(Pos(1,2),Pos(1,3)),List(Right)), ?)
         
         more.take(2).toSet                       //> res0: scala.collection.immutable.Set[(streams.scratch.Block, List[streams.sc
                                                  //| ratch.Move])] = Set((Block(Pos(1,2),Pos(1,3)),List(Right)), (Block(Pos(2,1),
                                                  //| Pos(3,1)),List(Down)))
}