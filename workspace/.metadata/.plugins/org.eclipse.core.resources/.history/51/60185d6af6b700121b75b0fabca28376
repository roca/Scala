
import forcomp.Anagrams._

object test {
val sentence = List("Linux", "rulez")             //> sentence  : List[String] = List(Linux)
val occurrences = sentenceOccurrences(sentence)   //> occurrences  : forcomp.Anagrams.Occurrences = List((i,1), (l,1), (n,1), (u,1
                                                  //| ), (x,1))
val combin = combinations(occurrences)            //> combin  : List[forcomp.Anagrams.Occurrences] = List(List((i,1)), List((l,1))
                                                  //| , List((n,1)), List((u,1)), List((x,1)), List((i,1), (l,1)), List((i,1), (n,
                                                  //| 1)), List((i,1), (u,1)), List((i,1), (x,1)), List((l,1), (n,1)), List((l,1),
                                                  //|  (u,1)), List((l,1), (x,1)), List((n,1), (u,1)), List((n,1), (x,1)), List((u
                                                  //| ,1), (x,1)), List((i,1), (l,1), (n,1)), List((i,1), (l,1), (u,1)), List((i,1
                                                  //| ), (l,1), (x,1)), List((i,1), (n,1), (u,1)), List((i,1), (n,1), (x,1)), List
                                                  //| ((i,1), (u,1), (x,1)), List((l,1), (n,1), (u,1)), List((l,1), (n,1), (x,1)),
                                                  //|  List((l,1), (u,1), (x,1)), List((n,1), (u,1), (x,1)), List((i,1), (l,1), (n
                                                  //| ,1), (u,1)), List((i,1), (l,1), (n,1), (x,1)), List((i,1), (l,1), (u,1), (x,
                                                  //| 1)), List((i,1), (n,1), (u,1), (x,1)), List((l,1), (n,1), (u,1), (x,1)), Lis
                                                  //| t((i,1), (l,1), (n,1), (u,1), (x,1)), List())
sentenceAnagrams(sentence)                        //> res0: List[forcomp.Anagrams.Sentence] = List(List(Linux), List(Unix), List(L
                                                  //| in, nil), List(nu), List(in))

}