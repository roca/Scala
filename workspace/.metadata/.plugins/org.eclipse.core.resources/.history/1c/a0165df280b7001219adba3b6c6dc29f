
import forcomp.Anagrams._

object test {
val sentence = List("Linux", "rulez")             //> sentence  : List[String] = List(Linux, rulez)
val occurrences = sentenceOccurrences(sentence)   //> occurrences  : forcomp.Anagrams.Occurrences = List((e,1), (i,1), (l,2), (n,1
                                                  //| ), (r,1), (u,2), (x,1), (z,1))
val combin = combinations(occurrences)            //> combin  : List[forcomp.Anagrams.Occurrences] = List(List((e,1)), List((i,1))
                                                  //| , List((l,1)), List((l,2)), List((n,1)), List((r,1)), List((u,1)), List((u,2
                                                  //| )), List((x,1)), List((z,1)), List((e,1), (i,1)), List((e,1), (l,1)), List((
                                                  //| e,1), (l,2)), List((e,1), (n,1)), List((e,1), (r,1)), List((e,1), (u,1)), Li
                                                  //| st((e,1), (u,2)), List((e,1), (x,1)), List((e,1), (z,1)), List((i,1), (l,1))
                                                  //| , List((i,1), (l,2)), List((i,1), (n,1)), List((i,1), (r,1)), List((i,1), (u
                                                  //| ,1)), List((i,1), (u,2)), List((i,1), (x,1)), List((i,1), (z,1)), List((l,1)
                                                  //| , (n,1)), List((l,1), (r,1)), List((l,1), (u,1)), List((l,1), (u,2)), List((
                                                  //| l,1), (x,1)), List((l,1), (z,1)), List((l,2), (n,1)), List((l,2), (r,1)), Li
                                                  //| st((l,2), (u,1)), List((l,2), (u,2)), List((l,2), (x,1)), List((l,2), (z,1))
                                                  //| , List((n,1), (r,1)), List((n,1), (u,1)), List((n,1), (u,2)), List((n,1), (x
                                                  //| ,1)), List((n,1), (z,1)), List((r,1), (u,1)), List((r,1), (u,2)), List((r,1)
                                                  //| , (x,1)), List((r,1), (z
                                                  //| Output exceeds cutoff limit.
showWords(dictionaryByOccurrences.get(occurrences))
                                                  //> res0: List[forcomp.Anagrams.Word] = List()
 sentenceAnagrams( sentence)                      //> res1: List[forcomp.Anagrams.Sentence] = List(List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), Lis
                                                  //| Output exceeds cutoff limit.

}