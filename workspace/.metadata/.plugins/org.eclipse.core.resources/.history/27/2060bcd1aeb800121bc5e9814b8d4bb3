
import forcomp.Anagrams._

object test {

val sentence = List("Linux", "rulez")             //> sentence  : List[String] = List(You, olive)
val big_word = sentence.foldRight("")((x,y) => x + y)
                                                  //> big_word  : String = Youolive
val occurrences = wordOccurrences(big_word)       //> occurrences  : forcomp.Anagrams.Occurrences = List((e,1), (i,1), (l,1), (o,2
                                                  //| ), (u,1), (v,1), (y,1))
    	   
    	   val x =for {
    	     c <- combinations(occurrences)
    	   } yield showWords(dictionaryByOccurrences.get(c))
                                                  //> x  : List[List[forcomp.Anagrams.Word]] = List(List(), List(), List(), List()
                                                  //| , List(), List(), List(), List(), List(), List(), List(), List(), List(), Li
                                                  //| st(), List(), List(), List(Io), List(), List(), List(), List(), List(), List
                                                  //| (), List(), List(), List(), List(), List(), List(), List(), List(), List(), 
                                                  //| List(), List(), List(), List(Eli, lie), List(), List(), List(), List(vie), L
                                                  //| ist(), List(Leo), List(), List(), List(Lev), List(Ely), List(), List(), List
                                                  //| (), List(), List(), List(), List(), List(), List(), List(oil), List(), List(
                                                  //| ), List(), List(), List(), List(), List(), List(), List(), List(), List(), L
                                                  //| ist(), List(ivy), List(Lou), List(), List(Loy), List(), List(), List(), List
                                                  //| (), List(), List(), List(), List(you), List(), List(), List(), List(), List(
                                                  //| ), List(), List(), List(lieu), List(evil, Levi, live, veil, vile), List(), L
                                                  //| ist(), List(), List(), List(), List(), List(), List(), List(), List(), List(
                                                  //| ), List(love), List(), L
                                                  //| Output exceeds cutoff limit.
       x.filter( x => x.length > 0)               //> res0: List[List[forcomp.Anagrams.Word]] = List(List(Io), List(Eli, lie), Lis
                                                  //| t(vie), List(Leo), List(Lev), List(Ely), List(oil), List(ivy), List(Lou), Li
                                                  //| st(Loy), List(you), List(lieu), List(evil, Levi, live, veil, vile), List(lov
                                                  //| e), List(levy), List(oily), List(olive))
    	   
    	   
    	   
 }