package patmat

import Huffman._
import scala.io._
import Stopwatch._


object scratch {
  println("Welcome to the Scala worksheet")
  val list = times(List('a', 'b', 'a','c','c','c'))
  val m = makeOrderedLeafList(list)
  
  val sampleTree = makeCodeTree(
  makeCodeTree(Leaf('x', 1), Leaf('e', 1)),
  Leaf('t', 2)
)
      
 val leaflist = List(Leaf('e', 1), Leaf('t', 2), Leaf('x', 4))
 val c = combine(leaflist)
                           
                                 
                                 
 
 combine(c)
 
    
makeCodeTree(Fork(Leaf('e',1),Leaf('t',2),List('e', 't'),3),Leaf('x',4))
 
 until(singleton, combine)(leaflist)
 createCodeTree(List('a', 'b', 'a','c','c','c'))
   
 val t1 = Fork(Leaf('a',2), Leaf('b',3), List('a','b'), 5)
decode(t1,List(0,1,1))
 
decodedSecret

encode(frenchCode) (decodedSecret)  == secret
 
 
 frenchCode
 
 val table = createCodeTable(frenchCode,decodedSecret)
  
convert(frenchCode)

convert2(frenchCode)




 
 codeBits(convert(frenchCode))('h')
 codeBits(convert2(frenchCode))('h')
 
 getBits('h', frenchCode)
 
 quickEncode(frenchCode)(decodedSecret)
 
 quickEncode(frenchCode)(decodedSecret)  == encode(frenchCode) (decodedSecret)

 mergeCodeTables(convert(frenchCode), convert(frenchCode)) == convert2(frenchCode)
                                                  
convert2(frenchCode) == convert(frenchCode)

val s = Source.fromFile("Huffman.scala")
var cl: List[Char] = List()
   s.getLines.foreach( (line) => {
    cl =string2Chars(line) ::: cl
   })
   
val treeCode = createCodeTree(cl)
   
 val quickEncode_sw = time("quickEncode elapsed time") {
   quickEncode(treeCode)(List('s','t','a','r','t'))
  }
  
  
  
  val encode_sw = time("quickEncode elapsed time") {
   encode(treeCode)(List('s','t','a','r','t'))
  }
  
   
  
}