package week2

object rationals {
  val x = new Rational(1,3)                       //> x  : week2.Rational = 1/3
  
  x.numer                                         //> res0: Int = 1
  x.denom                                         //> res1: Int = 3
  
  val y = new Rational(5,7)                       //> y  : week2.Rational = 5/7
  
  val z = new Rational(3,2)                       //> z  : week2.Rational = 3/2
  
  x.add(y)                                        //> res2: week2.Rational = 22/21
  x.sub(y).sub(z)                                 //> res3: week2.Rational = -79/42
  y.add(y)                                        //> res4: week2.Rational = 10/7
  x.less(y)                                       //> res5: Boolean = true
  x.max(y)                                        //> res6: week2.Rational = 5/7
  x.min(y)                                        //> res7: week2.Rational = 1/3
  val strange = new Rational(1,0)                 //> strange  : week2.Rational = 1/0
  strange.add(strange)                            //> java.lang.ArithmeticException: / by zero
                                                  //| 	at week2.Rational.numer(week2.rationals.scala:26)
                                                  //| 	at week2.Rational.toString(week2.rationals.scala:40)
                                                  //| 	at scala.runtime.ScalaRunTime$.scala$runtime$ScalaRunTime$$inner$1(Scala
                                                  //| RunTime.scala:328)
                                                  //| 	at scala.runtime.ScalaRunTime$.stringOf(ScalaRunTime.scala:333)
                                                  //| 	at scala.runtime.ScalaRunTime$.stringOf(ScalaRunTime.scala:270)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$show(Worksh
                                                  //| eetSupport.scala:90)
                                                  //| 	at week2.rationals$$anonfun$main$1.apply$mcV$sp(week2.rationals.scala:20
                                                  //| )
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$$anonfun$$exe
                                                  //| cute$1.apply$mcV$sp(WorksheetSupport.scala:76)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.redirected(W
                                                  //| orksheetSupport.scala:65)
                                                  //| 	at org.scalaide.worksheet.runtime.library.WorksheetSupport$.$execute(Wor
                                                  //| ksheetSupport.scala:75)
                                                  //| 	at week2.rationals$.main(week2.rationals.scala:3)
                                                  //| 	at week2.rati
                                                  //| Output exceeds cutoff limit.
}

class Rational(x:Int, y:Int) {
    private def gcd(a:Int, b:Int): Int = {if (b == 0) a else gcd(b, a % b)}
    private val g = gcd(x,y)
    def numer = x / g
    def denom = y / g
    
    def less(that: Rational): Boolean = {this.numer * that.denom < that.numer * this.denom}
    
    def max(that: Rational): Rational =  {if (this.less(that)) that else this}

    def min(that: Rational): Rational =  {if (this.less(that)) this else that}
    
    def add(that: Rational) : Rational = {
      new Rational(this.numer * that.denom + that.numer * this.denom, this.denom * that.denom)
    }
    
    override def toString(): String = {
     this.numer  + "/" + this.denom
    }
    
    def neg() : Rational = {
      new Rational(-this.numer,this.denom)
    }
    
    def sub(that: Rational): Rational = {
      //new Rational(this.numer * that.denom - that.numer * this.denom, this.denom * that.denom)
      add(that.neg)
    }
 }