package week2

object rationals {
  val x = new Rational(1,3)
  
  val a = 1
  val b = 2
  val c = 3
  val d = 4
  
  a + b ^ ? c ?^ d less a ==> b | c
  
  x.numer
  x.denom
  
  val y = new Rational(5,7)
  
  val z = new Rational(3,2)
  
  x + y
  x - y - z
  y + y
  x < y
  x max y
  x min y
  
  val t = new Rational(2)
 }

class Rational(x:Int, y:Int) {
    require( y != 0 , "denominator must be nonzero")
    private def gcd(a:Int, b:Int): Int = {if (b == 0) a else gcd(b, a % b)}
    private val g = gcd(x,y)
    def numer = x / g
    def denom = y / g
    
    def this(x:Int) = this(x,1)
    
    def < (that: Rational): Boolean = {this.numer * that.denom < that.numer * this.denom}
    
    def max(that: Rational): Rational =  {if (this < that) that else this}

    def min(that: Rational): Rational =  {if (this < that) this else that}
    
    def + (that: Rational) : Rational = {
      new Rational(this.numer * that.denom + that.numer * this.denom, this.denom * that.denom)
    }
    
    override def toString(): String = {
     this.numer  + "/" + this.denom
    }
    
    def unary_- : Rational = {
      new Rational(-this.numer,this.denom)
    }
    
    def - (that: Rational): Rational = {
      //new Rational(this.numer * that.denom - that.numer * this.denom, this.denom * that.denom)
      this + -that
    }
 }