package week6

object pairs {

def isPrime(n:Int): Boolean = (2 until n) forall ( n % _ != 0)
   
  val n = 7
  (1 until n) flatMap (i =>
   (1 until i) map (j => (i, j))) filter (pair => isPrime(pair._1 + pair._2))
  for {
   i <- 1 until n
   	j <- 1 until i
   		if isPrime( i + j)
  } yield (i,j)
   
   val xs = List(1.0,2.0,3.0)
   def scalarProduct(xs: List[Double], ys: List[Double]) : Double = {
     (xs zip ys).map{ case (x, y) => x * y }.sum
   }
   
   def scalarProduct2(xs: List[Double], ys: List[Double]) : Double = {
    {for {
         (x,y) <- (xs zip ys)
        } yield (x * y)
    }.sum
   }
   scalarProduct2(xs,xs)
   
   
   type Occurrence = (Char, Int)
  type Occurrences = List[Occurrence]
  
def expand(in: Occurrences): List[(Char,Int)] =
    for {
        o <- in
        i <- 1 to o._2
        
    } yield (o._1,i)
 
 
 def combine(in: Occurrences): Seq[Occurrences] =
    for {
        len <- 1 to in.length
        combinations <- in combinations len
    } yield combinations
    
    val ol = List(('a',2),('b',2))
    val e = expand(ol)
   val d =  e.groupBy( x => x._1 ) toList
    for {
      c <- d
      i <- c._2
    } yield (c._1,i)
    
    /*
   e.groupBy( x => x._1 ).values.toList
   
   
  e.combinations(2).toList
  for {
   x <- e.combinations(2).toList
  }yield x
   val z = e.combinations(ol.length).toList.filter(x => x.groupBy( y => y._1).toList.length <  2) ::: e.map( x => List(x)) ::: List(List())
  z.length
  
  */
}