package week2

object fixedPoint {

  def abs(x:Double) = if (x < 0) -x else x        //> abs: (x: Double)Double
  
  val tolerance = 0.0001                          //> tolerance  : Double = 1.0E-4
		def isCloseEnough(x: Double, y: Double) =
		abs((x - y) / x) / x < tolerance  //> isCloseEnough: (x: Double, y: Double)Boolean
		def fixedPoint(f: Double => Double)(firstGuess: Double) = {
				def iterate(guess: Double): Double = {
					println("guess" + guess)
					val next = f(guess)
					if (isCloseEnough(guess, next)) next
					else iterate(next)
				}
			iterate(firstGuess)
		}                                 //> fixedPoint: (f: Double => Double)(firstGuess: Double)Double
		fixedPoint(x => 1 + x/2) (1)      //> guess1.0
                                                  //| guess1.5
                                                  //| guess1.75
                                                  //| guess1.875
                                                  //| guess1.9375
                                                  //| guess1.96875
                                                  //| guess1.984375
                                                  //| guess1.9921875
                                                  //| guess1.99609375
                                                  //| guess1.998046875
                                                  //| guess1.9990234375
                                                  //| guess1.99951171875
                                                  //| res0: Double = 1.999755859375
		def sqrt(x : Double) = fixedPoint(y => x / y) (1)
                                                  //> sqrt: (x: Double)Double
}