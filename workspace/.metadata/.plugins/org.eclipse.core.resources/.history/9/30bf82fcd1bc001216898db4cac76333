package streams

import common._
import streams._

trait SolutionChecker extends GameDef with Solver with StringParserTerrain {
    /**
     * This method applies a list of moves `ls` to the block at position
     * `startPos`. This can be used to verify if a certain list of moves
     * is a valid solution, i.e. leads to the goal.
     */
    def solve(ls: List[Move]): Block =
      ls.foldLeft(startBlock) { case (block, move) => move match {
        case Left => block.left
        case Right => block.right
        case Up => block.up
        case Down => block.down
      }
    }
  }

  trait Level1 extends SolutionChecker {
      /* terrain for level 1*/

    val level =
    """ooo-------
      |oSoooo----
      |ooooooooo-
      |-ooooooooo
      |-----ooToo
      |------ooo-""".stripMargin

    val optsolution = List(Right, Right, Down, Right, Right, Right, Down)
  }

object scratch extends Level1{




val n  = neighborsWithHistory(Block(Pos(1,1),Pos(1,1)), List(Left,Up))
                                                  //> java.lang.IndexOutOfBoundsException: -1
                                                  //| 	at scala.collection.immutable.Vector.checkRangeConvert(Vector.scala:137)
                                                  //| 
                                                  //| 	at scala.collection.immutable.Vector.apply(Vector.scala:127)
                                                  //| 	at streams.StringParserTerrain$class.f$1(StringParserTerrain.scala:58)
                                                  //| 	at streams.StringParserTerrain$$anonfun$terrainFunction$1.apply(StringPa
                                                  //| rserTerrain.scala:60)
                                                  //| 	at streams.StringParserTerrain$$anonfun$terrainFunction$1.apply(StringPa
                                                  //| rserTerrain.scala:60)
                                                  //| 	at streams.GameDef$Block.isLegal(GameDef.scala:159)
                                                  //| 	at streams.GameDef$Block$$anonfun$legalNeighbors$1.apply(GameDef.scala:1
                                                  //| 46)
                                                  //| 	at streams.GameDef$Block$$anonfun$legalNeighbors$1.apply(GameDef.scala:1
                                                  //| 45)
                                                  //| 	at scala.collection.TraversableLike$WithFilter$$anonfun$map$2.apply(Trav
                                                  //| ersableLike.scala:722)
                                                  //| 	at scala.collection.immutable.List.foreach(List.scala:318)
                                                  //| 	at scala.collection.TraversableLike$WithFilter.map(TraversableLike.scala
                                                  //| :721)
                                                  //| 	at streams.GameDef$Block.legalNe
                                                  //| Output exceeds cutoff limit.
    
  
}