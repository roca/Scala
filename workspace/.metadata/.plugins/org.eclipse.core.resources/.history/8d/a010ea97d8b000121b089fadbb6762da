package week5

object listfun {
 val nums = List(2,-4,5,7,1)
   
  val fruits = List("apple","pineapple","orange","banna")
   def squareList(xs:List[Int]): List[Int] = xs match {
   case Nil => Nil
   case y :: ys => (y*y) :: squareList(ys)
   }
   squareList(nums)
   
   def squareList2(xs:List[Int]): List[Int] =
   xs map (x => x *x)
   
   squareList2(nums)
 
 nums filter ( x => x >0)
 nums filterNot ( x => x >0)
 
 nums partition(x => x >0)
 
 nums takeWhile(x => x >0)
 
 nums dropWhile(x => x >0)
 
 nums span(x => x >0)
 
 val data = List("a","a","a","b","c","c","a")
 def pack[T](xs:List[T]): List[List[T]] = xs match {
  case Nil => Nil
  case x :: xsl =>
    val (first,rest) = xs span ( y => y ==x)
    first :: pack(rest)
 }
 
 pack(data)
 
 
 def encode[T](xs:List[T]): List[(T,Int)] =
 pack(xs) map (ys => (ys.head,ys.length))
 
 
 encode(data)
 
 def concat[T](xs: List[T], ys: List[T]): List[T] =
    (xs foldLeft ys) (_ :: _)
    
  
def mapFun[T, U](xs: List[T], f: T => U): List[U] =
    (xs foldRight List[U]())( (A, B) => f(A) :: B )

  def lengthFun[T](xs: List[T]): Int =
    (xs foldRight 0)(  (A, B) => B + 1 )
    
 lengthFun(nums)
 //mapFun(nums, ( _ / 2))
}