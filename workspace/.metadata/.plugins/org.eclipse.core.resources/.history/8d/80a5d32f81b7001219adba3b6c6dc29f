
import forcomp.Anagrams._

object test {
val sentence = List("I", "love","you")            //> sentence  : List[String] = List(I, love, you)
val occurrences = sentenceOccurrences(sentence)   //> occurrences  : forcomp.Anagrams.Occurrences = List((e,1), (i,1), (l,1), (o,2
                                                  //| ), (u,1), (v,1), (y,1))
val combin = combinations(occurrences)            //> combin  : List[forcomp.Anagrams.Occurrences] = List(List((e,1)), List((i,1))
                                                  //| , List((l,1)), List((o,1)), List((o,2)), List((u,1)), List((v,1)), List((y,1
                                                  //| )), List((e,1), (i,1)), List((e,1), (l,1)), List((e,1), (o,1)), List((e,1), 
                                                  //| (o,2)), List((e,1), (u,1)), List((e,1), (v,1)), List((e,1), (y,1)), List((i,
                                                  //| 1), (l,1)), List((i,1), (o,1)), List((i,1), (o,2)), List((i,1), (u,1)), List
                                                  //| ((i,1), (v,1)), List((i,1), (y,1)), List((l,1), (o,1)), List((l,1), (o,2)), 
                                                  //| List((l,1), (u,1)), List((l,1), (v,1)), List((l,1), (y,1)), List((o,1), (u,1
                                                  //| )), List((o,1), (v,1)), List((o,1), (y,1)), List((o,2), (u,1)), List((o,2), 
                                                  //| (v,1)), List((o,2), (y,1)), List((u,1), (v,1)), List((u,1), (y,1)), List((v,
                                                  //| 1), (y,1)), List((e,1), (i,1), (l,1)), List((e,1), (i,1), (o,1)), List((e,1)
                                                  //| , (i,1), (o,2)), List((e,1), (i,1), (u,1)), List((e,1), (i,1), (v,1)), List(
                                                  //| (e,1), (i,1), (y,1)), List((e,1), (l,1), (o,1)), List((e,1), (l,1), (o,2)), 
                                                  //| List((e,1), (l,1), (u,1)
                                                  //| Output exceeds cutoff limit.
showWords(dictionaryByOccurrences.get(occurrences))
                                                  //> res0: List[forcomp.Anagrams.Word] = List()
 sentenceAnagrams( sentence)                      //> res1: List[forcomp.Anagrams.Sentence] = List(List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(olive)
                                                  //| , List(), List(), List(), List(), List(), List(), List(), List(), List(), Li
                                                  //| st(), List(), List(), List(), List(), List(), List(), List(), List(), List()
                                                  //| , List(), List(), List(), List(), List(oily), List(), List(), List(), List()
                                                  //| , List(), List(), List(), List(), List(), List(levy), List(), List(), List()
                                                  //| , List(), List(), List(), List(love), List(), List(), List(), List(), List()
                                                  //| , List(), List(), List(), List(), List(), List(), List(evil, Levi, live, vei
                                                  //| l, vile), List(lieu), Li
                                                  //| Output exceeds cutoff limit.

}