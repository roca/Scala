package idealized.scala

/*


abstract class Boolean {
   def ifThenElse[T](t: => T, e: => T): T
   def && (x: => Boolean): Boolean = ifThenElse(x, idealized.scala.false)
   def || (x: => Boolean): Boolean = ifThenElse(idealized.scala.true, x)
   def unary_!: Boolean = ifThenElse(idealized.scala.false, idealized.scala.true)
   def == (x: Boolean): Boolean = ifThenElse(x, x.unary_!)
   def != (x: Boolean): Boolean = ifThenElse(x.unary_!, x)
}

object true extends idealized.scala.Boolean {
	def ifThenElse[T](t: => T, e: => T) = t
}
object false extends idealized.scala.Boolean {
	def ifThenElse[T](t: => T, e: => T) = e
}
*/


// Peano numbers

abstract class Nat {
	def isZero: Boolean
	def predecessor: Nat
	def + (that: Nat): Nat
	def - (that: Nat): Nat
	def successor = new Succ(this)
}


object Zero extends Nat {
    def isZero: Boolean = true
	def predecessor: Nat = throw new Error("0.predecessor")
	def + (that: Nat): Nat = that
	def - (that: Nat): Nat = if(that.isZero) this else throw new Error("0.predecessor")
}
class Succ(n: Nat) extends Nat {
    def isZero: Boolean = false
	def predecessor: Nat = n
	def + (that: Nat): Nat = new Succ(n + that)
	def - (that: Nat): Nat = if(that.isZero) this else n - that.predecessor
}