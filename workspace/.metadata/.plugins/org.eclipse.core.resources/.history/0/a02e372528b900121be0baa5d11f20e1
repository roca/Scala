
import forcomp.Anagrams._

object test {

val anas = List(                                  //> anas  : List[List[String]] = List(List(Rex, Lin, Zulu), List(nil, Zulu, Rex)
         List("en", "as", "my"),
         List("en", "my", "as"),
         List("man", "yes"),
         List("men", "say"),
         List("as", "en", "my"),
         List("as", "my", "en"),
         List("sane", "my"),
         List("Sean", "my"),
         List("my", "en", "as"),
         List("my", "as", "en"),
         List("my", "sane"),
         List("my", "Sean"),
         List("say", "men"),
         List("yes","man")
       )
                                                  //| , List(Rex, nil, Zulu), List(Zulu, Rex, Lin), List(null, Uzi, Rex), List(Rex
                                                  //| , Zulu, Lin), List(Uzi, null, Rex), List(Rex, null, Uzi), List(null, Rex, Uz
                                                  //| i), List(Lin, Rex, Zulu), List(nil, Rex, Zulu), List(Rex, Uzi, null), List(R
                                                  //| ex, Zulu, nil), List(Zulu, Rex, nil), List(Zulu, Lin, Rex), List(Lin, Zulu, 
                                                  //| Rex), List(Uzi, Rex, null), List(Zulu, nil, Rex), List(rulez, Linux), List(L
                                                  //| inux, rulez))
val sentence = List("Yes", "man")                 //> sentence  : List[String] = List(Yes, man)


sentenceAnagrams(sentence).toSet == anas.toSet    //> res0: List[forcomp.Anagrams.Sentence] = List(List(as, en, my), List(as, my, 
                                                  //| en), List(en, as, my), List(en, my, as), List(my, as, en), List(my, en, as),
                                                  //|  List(my, sane), List(my, Sean), List(man, yes), List(say, men), List(men, s
                                                  //| ay), List(yes, man), List(sane, my), List(Sean, my))
                             

                     
                      
                      




 }