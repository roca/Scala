
import forcomp.Anagrams._

object test {

val sentence = List("Linux", "rulez")             //> sentence  : List[String] = List(Linux, rulez)
val big_word = sentence.foldRight("")((x,y) => x + y)
                                                  //> big_word  : String = Linuxrulez
val occurrences = wordOccurrences(big_word)       //> occurrences  : forcomp.Anagrams.Occurrences = List((e,1), (i,1), (l,2), (n,1
                                                  //| ), (r,1), (u,2), (x,1), (z,1))
    	   
    	   val x =for {
    	     c <- combinations(occurrences)
    	   } yield showWords(dictionaryByOccurrences.get(c))
                                                  //> x  : List[List[forcomp.Anagrams.Word]] = List(List(), List(), List(), List()
                                                  //| , List(), List(), List(), List(), List(), List(), List(), List(), List(), Li
                                                  //| st(en), List(re), List(), List(), List(ex), List(), List(), List(ill), List(
                                                  //| in), List(), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(), List(), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(nu), List(), List(), List(), List(), List(), List(), List(), List(), List(
                                                  //| ), List(), List(), List(), List(Eli, lie), List(), List(), List(ire), List()
                                                  //| , List(), List(), List(), List(Len), List(), List(), List(), List(), List(),
                                                  //|  List(Nell), List(), List(), List(), List(), List(), List(), List(), List(),
                                                  //|  List(), List(Zen), List(rue), List(), List(Rex), List(), List(), List(), Li
                                                  //| st(), List(), List(), List(Lin, nil), List(), List(), List(), List(), List(L
                                                  //| iz), List(), List(rill), List(), List(), List(), List(), List(), List(), Lis
                                                  //| t(), List(), List(), Lis
                                                  //| Output exceeds cutoff limit.
       x.filter( x => x.length > 0)               //> res0: List[List[forcomp.Anagrams.Word]] = List(List(en), List(re), List(ex),
                                                  //|  List(ill), List(in), List(nu), List(Eli, lie), List(ire), List(Len), List(N
                                                  //| ell), List(Zen), List(rue), List(Rex), List(Lin, nil), List(Liz), List(rill)
                                                  //| , List(Uri), List(Uzi), List(Zulu), List(null), List(run, urn), List(lien, l
                                                  //| ine, Neil, Nile), List(lieu), List(rein), List(lure, rule), List(ruin), List
                                                  //| (Unix), List(liner), List(urine), List(rulez), List(Linux))
    	   
    	   
    	   
 }