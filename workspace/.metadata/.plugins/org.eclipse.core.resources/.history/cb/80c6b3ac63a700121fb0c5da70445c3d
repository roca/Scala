package idealized.scala

abstract class Boolean {
   def ifThenElse[T](t: => T, e: => T): T
   def && (x: => Boolean): Boolean = ifThenElse(x, myfalse)
   def || (x: => Boolean): Boolean = ifThenElse(mytrue, x)
   def unary_!(): Boolean = ifThenElse(myfalse, mytrue)
   def == (x:  Boolean): Boolean = ifThenElse(x, x.unary_!)
   def != (x: Boolean): Boolean = ifThenElse(x.unary_!, x)
}

object mytrue extends idealized.scala.Boolean {
	def ifThenElse[T](t: => T, e: => T) = t
}
object myfalse extends idealized.scala.Boolean {
	def ifThenElse[T](t: => T, e: => T) = e
}



