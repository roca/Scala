package week2

object rationals {
  val x = new Rational(1,3)
  
  x.numer
  x.denom
  
  val y = new Rational(5,7)
  
  val z = new Rational(3,2)
  
  x.add(y)
  x.sub(y).sub(z)
  y.add(y)
  x.less(y)
  x.max(y)
  x.min(y)
  val strange = new Rational(1,0)
  strange.add(strange)
}

class Rational(x:Int, y:Int) {
    require( y != 0 , "denominator must be nonzero")
    private def gcd(a:Int, b:Int): Int = {if (b == 0) a else gcd(b, a % b)}
    private val g = gcd(x,y)
    def numer = x / g
    def denom = y / g
    
    def less(that: Rational): Boolean = {this.numer * that.denom < that.numer * this.denom}
    
    def max(that: Rational): Rational =  {if (this.less(that)) that else this}

    def min(that: Rational): Rational =  {if (this.less(that)) this else that}
    
    def add(that: Rational) : Rational = {
      new Rational(this.numer * that.denom + that.numer * this.denom, this.denom * that.denom)
    }
    
    override def toString(): String = {
     this.numer  + "/" + this.denom
    }
    
    def neg() : Rational = {
      new Rational(-this.numer,this.denom)
    }
    
    def sub(that: Rational): Rational = {
      //new Rational(this.numer * that.denom - that.numer * this.denom, this.denom * that.denom)
      add(that.neg)
    }
 }