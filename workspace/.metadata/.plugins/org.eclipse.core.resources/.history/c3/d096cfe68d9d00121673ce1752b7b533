package funsets

import org.scalatest.FunSuite

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner

/**
 * This class is a test suite for the methods in object FunSets. To run
 * the test suite, you can either:
 *  - run the "test" command in the SBT console
 *  - right-click the file in eclipse and chose "Run As" - "JUnit Test"
 */
@RunWith(classOf[JUnitRunner])
class FunSetSuite extends FunSuite {


  /**
   * Link to the scaladoc - very clear and detailed tutorial of FunSuite
   *
   * http://doc.scalatest.org/1.9.1/index.html#org.scalatest.FunSuite
   *
   * Operators
   *  - test
   *  - ignore
   *  - pending
   */

  /**
   * Tests are written using the "test" operator and the "assert" method.
   */
  test("string take") {
    val message = "hello, world"
    assert(message.take(5) == "hello")
  }

  /**
   * For ScalaTest tests, there exists a special equality operator "===" that
   * can be used inside "assert". If the assertion fails, the two values will
   * be printed in the error message. Otherwise, when using "==", the test
   * error message will only say "assertion failed", without showing the values.
   *
   * Try it out! Change the values so that the assertion fails, and look at the
   * error message.
   */
  test("adding ints") {
    assert(1 + 2 === 3)
  }

  
  import FunSets._

  test("contains is implemented") {
    assert(contains(x => true, 100))
  }
  
  /**
   * When writing tests, one would often like to re-use certain values for multiple
   * tests. For instance, we would like to create an Int-set and have multiple test
   * about it.
   * 
   * Instead of copy-pasting the code for creating the set into every test, we can
   * store it in the test class using a val:
   * 
   *   val s1 = singletonSet(1)
   * 
   * However, what happens if the method "singletonSet" has a bug and crashes? Then
   * the test methods are not even executed, because creating an instance of the
   * test class fails!
   * 
   * Therefore, we put the shared values into a separate trait (traits are like
   * abstract classes), and create an instance inside each test method.
   * 
   */

  trait TestSets {
    val s1 = singletonSet(1)
    val s2 = singletonSet(2)
    val s3 = singletonSet(3)
  }

  /**
   * This test is currently disabled (by using "ignore") because the method
   * "singletonSet" is not yet implemented and the test would fail.
   * 
   * Once you finish your implementation of "singletonSet", exchange the
   * function "ignore" by "test".
   */
  test("singletonSet(1) contains 1") {
    
    /**
     * We create a new instance of the "TestSets" trait, this gives us access
     * to the values "s1" to "s3". 
     */
    new TestSets {
      /**
       * The string argument of "assert" is a message that is printed in case
       * the test fails. This helps identifying which assertion failed.
       */
      assert(contains(s1, 1), "Singleton")
    }
  }

  test("union contains all elements") {
    new TestSets {
      val s = multiElement(1,2, x => x + 1)  //union(s1, s2)
      assert(contains(s, 1), "Union 1")
      assert(contains(s, 2), "Union 2")
      assert(!contains(s, 3), "Union 3")
    }
  }
  
  test("intersect contains shared elements") {
    new TestSets {
      val s_1_2 = union(s1, s2)
      val s_2_3 = union(s2, s3)
      assert(!contains(intersect(s_1_2,s_2_3), 1),  "Intersect 1")
      assert(contains(intersect(s_1_2,s_2_3),  2),  "Intersect 2")
      assert(!contains(intersect(s_1_2,s_2_3), 3),  "Intersect 3")
    }
  }

  test("diff contains unshared elements") {
    new TestSets {
      val s4 = singletonSet(4)
      val s_1_2_3_4 = multiElement(1,4, x => x + 1)
      val s_2_3 = multiElement(2,3, x => x + 1)
      assert( contains(diff(s_1_2_3_4,s_2_3), 1),  "Diff 1")
      assert(!contains(diff(s_1_2_3_4,s_2_3), 2),  "Diff 2")
      assert(!contains(diff(s_1_2_3_4,s_2_3), 3),  "Diff 3")
      assert( contains(diff(s_1_2_3_4,s_2_3), 4),  "Diff 4")
    }
  }
  
  
   test("filter contains elements for with p is true") {
    new TestSets {
      val s_1_2_3_4 = multiElement(1,4, x => x + 1)
      
      val filtered = filter(s_1_2_3_4, x => (x == 2 || x == 3))
      val empty_set = filter(s_1_2_3_4, x => (x == 17))
      
      assert(!contains(filtered, 1),  "Filter out 1")
      assert( contains(filtered, 2),  "Kept 2")
      assert( contains(filtered, 3),  "Kept 3")
      assert(!contains(filtered, 4),  "Filter out 4")
      
      assert(!contains(empty_set, 1),  "Filter out 1")
      assert(!contains(empty_set, 2),  "Filter out 2")
      assert(!contains(empty_set, 3),  "Filter out 3")
      assert(!contains(empty_set, 4),  "Filter out 4")

    }
  }

  
   test("Returns whether all bounded integers within `s` satisfy `p`.") {
    new TestSets {
      val s_1_to_100     = multiElement(1,100, x => x + 1)
      val s_even_numbers = multiElement(-10,100, x => x + 2)
      val s_odd_numbers  = multiElement(-11,100, x => x + 2)
       
      assert( forall(s_1_to_100, x => x >= 0),  "They are all nonnegative number")
      assert(!forall(s_1_to_100, x => x == 2),  "They are not all equal to 2")
      assert( forall(s_even_numbers, x => (x % 2) == 0 ),  "They are all even number")
      assert( forall(s_odd_numbers, x => (x % 2) != 0 ),  "They are all odd number")
      assert( forall(diff(s_1_to_100,s_odd_numbers), x => (x % 2) == 0 ),  "They are all even number")
      assert( forall(diff(s_1_to_100,s_even_numbers), x => (x % 2) != 0 ),  "They are all odd number")
    }
  }
   
   test("exists contains element x") {
    new TestSets {
      val s_even_numbers = multiElement(-10,100, x => x + 2)
      
      
      assert(!exists(s_even_numbers, x => x == 1),  "1 does not exist")
      assert( exists(s_even_numbers, x => x == 2),  "2 exists")
      assert(!exists(s_even_numbers, x => x == 3),  "3 does not exist")
      assert( exists(s_even_numbers, x => x == 4),  "4 exists")
      assert(!exists(s_even_numbers, x => x == 5),  "5 does not exist")
      

    }
  }   

   
   test("map Returns a set transformed by applying `f` to each element of `s`.") {
    new TestSets {
      val s_odd_numbers  = multiElement(-11,100, x => x + 2)
      
      val s_even_numbers = map(s_odd_numbers, x => x * 2)
     
      
      assert( forall(s_even_numbers, x => (x % 2) == 0 ),  "They are all even number")

    }
  }   

}
